name: Build macOS App

on:
  push:
    branches: [ "main" ] # 触发条件：main分支推送时自动编译
  workflow_dispatch: # 允许手动触发

jobs:
  build:
    runs-on: macos-latest # 必须使用macOS运行器

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Go环境
      uses: actions/setup-go@v4
      with:
        go-version: '1.22.9' # 指定你的Go版本
      env:
        CGO_ENABLED: "1"  # 关键修复：启用 CGO  

    - name: 安装Go Module
      run: |
          # 强制初始化模块（如果项目未 go mod init）
          go mod init myapp 2>/dev/null || true
          go mod tidy  # 同步依赖到 go.mod/go.sum
          go mod download  # 预下载所有依赖 
        
    - name: Install GLFW dependencies
      run: |
       # 静默安装（-q 参数抑制输出）
        brew install -q pkg-config
        # 安装 macOS 系统级 OpenGL 开发包
        brew install pkg-config glfw || true  # 防止已安装时报错中断      
        # 获取绝对路径并导出变量
        echo "GLFW_PREFIX=$(brew --prefix glfw)" >> $GITHUB_ENV

    - name: 安装Fyne工具链
      run: |
        go install fyne.io/fyne/v2/cmd/fyne@latest
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH  # 更安全的 PATH 配置方式

    - name: 编译并打包
      env:
        CGO_CFLAGS:  "-I${{ env.GLFW_PREFIX }}/include"  # 指定 GLFW 头文件路径
        CGO_LDFLAGS: "-L${{ env.GLFW_PREFIX }}/lib -lglfw"  # 链接 GLFW 库
      run: |
        # 验证路径是否正确
        echo "GLFW Include Path: ${{ env.GLFW_PREFIX }}/include"
        echo "GLFW Library Path: ${{ env.GLFW_PREFIX }}/lib"
        # 显式指定目标架构（兼容 Apple Silicon）
        export GOARCH=amd64  # 或 arm64
        # 构建命令
        go build -v -tags fyne_gui -ldflags="-w -s" -o myapp
        fyne package -os darwin -name "MyApp" -icon assets/icon.png

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: MyApp-MacOS
        path: |
          MyApp.app
          myapp-macos
